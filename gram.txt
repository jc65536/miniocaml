expr ::=
    | value-name                                variables
    | constant                                  constants
    | "(" expr ")"                              grouping
    | expr { "," expr }+                        tuples
    | expr "::" expr                            list cons
    | "[" expr { ";" expr } "]"                 lists
    | expr { expr }+                            function application
    | expr infix-op expr                        infix ops
    | "if" expr "then" expr "else" expr         if-else statements
    | "match" expr "with" pattern-matching      match statements
    | "fun" pattern "->" expr                   lambdas
    | "let" [ "rec" ] let-binding "in" expr     let bindings

infix-op ::= "+" | "*" | "=" | "<" | "||" | "&&"

constant ::= integer-literal | "false" | "true" | "()" | "[]"

pattern-matching ::= { "|" pattern "->" expr }+

pattern ::=
    | value-name
    | "_"
    | constant
    | "(" pattern ")"
    | pattern "|" pattern
    | pattern { "," pattern }+
    | "[" pattern { ";" pattern } "]"
    | pattern "::" pattern

let-binding ::= pattern "=" expr
